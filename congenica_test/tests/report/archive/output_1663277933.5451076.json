{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "driver = <appium.webdriver.webdriver.WebDriver (session=\"ac4630d341e30dada4f9e0ac914ad197c4e5d467\")>\n\n    @pytest.fixture(autouse=True, scope=\"session\")\n    def authorization(driver):  # TODO handle condition for import screens of android or ios\n        welcome_screen = WelcomeTutorialScreen(driver)\n        welcome_screen.skip_tutorial_button()\n        login_screen = LoginScreen(driver)\n        login_screen.click_to_login_btn()\n        login_screen.fill_phone_number()\n        login_screen.fill_password_field()\n        admin_page = AdminPage()\n        code = admin_page.get_activation_code(login_screen.LOGIN_PATIENT.phone)\n        login_screen.enter_sms_code(code)\n        login_screen.enter_login_pin()\n        #login_screen.skip_notifications()\n        #home_screen = HomeScreen(driver)\n        #home_screen.find_main_header()\n        driver.terminate_app(\"ru.medsi.smartmed.dev\")\n        driver.launch_app()\n>       login_screen.enter_pin()\n\n../conftest.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../src/screens/ios/login_screen.py:62: in enter_pin\n    self.find_element(self.ENTER_PIN)\n../src/helpers/app.py:37: in find_element\n    element = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ac4630d341e30dada4f9e0ac914ad197c4e5d467\")>, method = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x7fa9b1a47a00>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../venv/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException\n", "test_name": "test_appointment_online", "rerun": "0"}}, "suite_name": "tests/test_appointment_online.py"}}}, "date": "September 16, 2022", "start_time": 1663277612.5142868, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}